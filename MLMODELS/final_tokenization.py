# -*- coding: utf-8 -*-
"""final tokenization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GuUDhu1YBIY757SUo2qEh_Z6hNNd-R4q
"""

!pip install pytesseract pillow opencv-python-headless

# Step 2: Import necessary libraries
import pytesseract
from PIL import Image, ImageDraw, ImageFont
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Step 3: Upload your image
from google.colab import files
uploaded = files.upload()

# Step 4: Load and process the uploaded image
image_path = list(uploaded.keys())[0]
image = cv2.imread(image_path)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Step 5: Use pytesseract to extract text
text = pytesseract.image_to_string(gray)
print("Extracted Text:", text)

# Step 6: Tokenize the text into characters (including spaces and punctuation)
tokens = list(text)
print("Character Tokens:", tokens)

# Step 7: Generate character images
def generate_character_image(char, size=64):
    img = Image.new('L', (size, size), color=0)  # black background
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("DejaVuSans-Bold.ttf", size - 10)
    except:
        font = ImageFont.load_default()

    w, h = draw.textsize(char, font=font)
    draw.text(((size - w) / 2, (size - h) / 2), char, fill=255, font=font)

def generate_character_image(char, size=64):
    img = Image.new('L', (size, size), color=0)  # black background
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("DejaVuSans-Bold.ttf", size - 10)
    except:
        font = ImageFont.load_default()

    w, h = draw.textsize(char, font=font)
    draw.text(((size - w) / 2, (size - h) / 2), char, fill=255, font=font)

    # Thresholding to mimic your style
    img_np = np.array(img)
    _, thresh = cv2.threshold(img_np, 128, 255, cv2.THRESH_BINARY)

    return thresh

def generate_character_image(char, size=64):
    img = Image.new('L', (size, size), color=0)  # black background
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("DejaVuSans-Bold.ttf", size - 10)
    except:
        font = ImageFont.load_default()

    # Use textbbox instead of textsize
    bbox = draw.textbbox((0, 0), char, font=font)
    w, h = bbox[2] - bbox[0], bbox[3] - bbox[1]

    draw.text(((size - w) / 2, (size - h) / 2), char, fill=255, font=font)

    # Thresholding to mimic your style
    img_np = np.array(img)
    _, thresh = cv2.threshold(img_np, 128, 255, cv2.THRESH_BINARY)

    return thresh

import cv2
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
import os

# Character image generator
def generate_character_image(char, size=64):
    img = Image.new('L', (size, size), color=0)  # black background
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("DejaVuSans-Bold.ttf", size - 10)
    except:
        font = ImageFont.load_default()

    # Get bounding box for text and center it
    bbox = draw.textbbox((0, 0), char, font=font)
    w, h = bbox[2] - bbox[0], bbox[3] - bbox[1]
    draw.text(((size - w) / 2, (size - h) / 2), char, fill=255, font=font)

    img_np = np.array(img)
    _, thresh = cv2.threshold(img_np, 128, 255, cv2.THRESH_BINARY)

    return thresh

# Example tokens from OCR or cleaned text
tokens = list(")

# Output folder
os.makedirs("char_images", exist_ok=True)

# Generate and display character images
for i, char in enumerate(tokens):
    if char.strip() == "":
        continue
    char_img = generate_character_image(char)
    filename = f"char_images/char_{i}_{ord(char)}.png"
    cv2.imwrite(filename, char_img)
    plt.imshow(char_img, cmap='gray')
    plt.title(f"'{char}'")
    plt.axis('off')
    plt.show()

# Install dependencies
!pip install pytesseract pillow opencv-python-headless matplotlib

import pytesseract
import cv2
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
import os

# Upload your image
from google.colab import files
uploaded = files.upload()

# Load the uploaded image
img_path = list(uploaded.keys())[0]
img = cv2.imread(img_path)
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# OCR to extract text
custom_config = r'--oem 3 --psm 6'
text = pytesseract.image_to_string(gray, config=custom_config)
print("Extracted Text:\n", text)

# Tokenize characters from words
words = text.split()
tokens = list(''.join(words))  # flatten into characters

# Character image generator
def generate_character_image(char, size=64):
    img = Image.new('L', (size, size), color=0)  # black background
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("DejaVuSans-Bold.ttf", size - 10)
    except:
        font = ImageFont.load_default()

    bbox = draw.textbbox((0, 0), char, font=font)
    w, h = bbox[2] - bbox[0], bbox[3] - bbox[1]
    draw.text(((size - w) / 2, (size - h) / 2), char, fill=255, font=font)

    img_np = np.array(img)
    _, thresh = cv2.threshold(img_np, 128, 255, cv2.THRESH_BINARY)

    return thresh

# Create output folder
os.makedirs("char_images", exist_ok=True)

# Generate and show/save characters
for i, char in enumerate(tokens):
    if char.strip() == "":
        continue
    char_img = generate_character_image(char)
    filename = f"char_images/char_{i}_{ord(char)}.png"
    cv2.imwrite(filename, char_img)
    plt.imshow(char_img, cmap='gray')
    plt.title(f"'{char}'")
    plt.axis('off')
    plt.show()

image_path = '/content/handwriting.jpg'
image = cv2.imread(image_path)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

# Install required packages
!pip install opencv-python-headless matplotlib

import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
from google.colab import files
from PIL import Image

# Upload your image
uploaded = files.upload()
img_path = list(uploaded.keys())[0]

# Load and preprocess
img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
_, thresh = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# Find contours (external only)
contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Sort contours left to right
def sort_contours(cnts):
    bounding_boxes = [cv2.boundingRect(c) for c in cnts]
    sorted_pairs = sorted(zip(cnts, bounding_boxes), key=lambda b: b[1][0])
    return [pair[0] for pair in sorted_pairs]

sorted_contours = sort_contours(contours)

# Create folder
os.makedirs("char_segments", exist_ok=True)

# Extract and save character images
for i, cnt in enumerate(sorted_contours):
    x, y, w, h = cv2.boundingRect(cnt)
    if w > 5 and h > 10:  # filter noise
        char = thresh[y:y+h, x:x+w]
        char = cv2.resize(char, (64, 64), interpolation=cv2.INTER_AREA)
        filename = f"char_segments/char_{i}.png"
        cv2.imwrite(filename, char)
        plt.imshow(char, cmap='gray')
        plt.title(f"Char {i}")
        plt.axis('off')
        plt.show()

# Install required packages
!pip install opencv-python-headless matplotlib

import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
from google.colab import files

# Upload your image
uploaded = files.upload()
img_path = list(uploaded.keys())[0]

# Load and preprocess
img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
_, thresh = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# Find contours
contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Sort contours left to right
def sort_contours(cnts):
    bounding_boxes = [cv2.boundingRect(c) for c in cnts]
    sorted_pairs = sorted(zip(cnts, bounding_boxes), key=lambda b: b[1][0])
    return [pair[0] for pair in sorted_pairs]

sorted_contours = sort_contours(contours)

# Output folder
os.makedirs("char_segments", exist_ok=True)

# Extract, pad, blur, and save
for i, cnt in enumerate(sorted_contours):
    x, y, w, h = cv2.boundingRect(cnt)
    if w > 5 and h > 10:
        char = thresh[y:y+h, x:x+w]

        # Add padding (20% of width and height)
        pad_w = int(0.2 * w)
        pad_h = int(0.2 * h)
        padded = cv2.copyMakeBorder(char, pad_h, pad_h, pad_w, pad_w, borderType=cv2.BORDER_CONSTANT, value=0)

        # Resize to 64x64
        resized = cv2.resize(padded, (64, 64), interpolation=cv2.INTER_AREA)

        # Apply Gaussian blur for soft edges
        blurred = cv2.GaussianBlur(resized, (3, 3), sigmaX=1)

        # Save and show
        filename = f"char_segments/char_{i}.png"
        cv2.imwrite(filename, blurred)
        plt.imshow(blurred, cmap='gray')
        plt.title(f"Char {i}")
        plt.axis('off')
        plt.show()

